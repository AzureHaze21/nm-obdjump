/*
** EPITECH PROJECT, 2018
** 
** File description:
** 
*/

#include <malloc.h>
#include <string.h>
#include <stdio.h>
#include "nm.h"

int	my_strcasecmp(char *s1, char *s2)
{
		int	ret;
		
		while (*s1 && *s2)
		{
				s1 += strchr("_@.", *s1) ? 1 : 0;
				s2 += strchr("_@.", *s2) ? 1 : 0;
				if (!strchr("_@.", *s1) && !strchr("_@.", *s2))
				{
						ret =  TO_LOWER(*s1) - TO_LOWER(*s2);
						if (ret)
								return (ret);
						s1++;
						s2++;
						if (!(*s1) && *s2)
								return (-1);
						else if (*s1 && !(*s2))
								return (1);
				}
		}
		return (0);
}

void free_symlist(t_sym *head)
{
		t_sym *p = NULL;

		while (head)
		{
				p = head;
				head = p->next;
				free(p);
		}
}

void swap_syms(t_sym **head)
{
		char *tmp;

		if (!head || !(*head))
				return ;
		if (!((*head)->next))
				return ;
		(*head)->addr ^= (*head)->next->addr;
		(*head)->next->addr ^= (*head)->addr;
		(*head)->addr ^= (*head)->next->addr;
		(*head)->type ^= (*head)->next->type;
		(*head)->next->type ^= (*head)->type;
		(*head)->type ^= (*head)->next->type;
		tmp = (*head)->name;
		(*head)->name = (*head)->next->name;
		(*head)->next->name = tmp;
}

void push_sym(t_sym **head,
			  unsigned addr,
			  unsigned char type,
			  char *name)
{
		t_sym *p;
		t_sym *curr;

		if(!head || !name)
				return ;
		if (!(p = malloc(sizeof(t_sym))))
				return ;
		p->addr = addr;
		p->type = type;
		p->name = name;
		p->next = NULL;
		if (!(*head))
		{
				*head = p;
				return ;
		}
		curr = *head;
		while (curr->next)
				curr = curr->next;
		curr->next = p;
}

void print_symlist(t_sym *head)
{
		if (!head)
				return ;
		while (head)
		{
				if (head->addr || (head->type == 'T'))
						printf("%016x", head->addr);
				else
						printf("%16c", 0x20);
				printf(" %c", head->type);
				printf(" %s\n", head->name);
				head = head->next;
		}
}

void print_symlist32(t_sym *head)
{
		if (!head)
				return ;
		while (head)
		{
				if (head->addr || (head->type == 'T'))
						printf("%08x", head->addr);
				else
						printf("%8c", 0x20);
				printf(" %c", head->type);
				printf(" %s\n", head->name);
				head = head->next;
		}
}

void sort_symlist(t_sym **head)
{
		t_sym *curr;
		int	res;

		if (!head || !(*head))
				return ;
		curr = *head;
		while (curr->next)
		{
				res = my_strcasecmp(curr->name, curr->next->name);
				swap_syms(&curr);
				if (res > 0)
				  {
						swap_syms(&curr);
						curr = *head;
				  }
				  else
						curr = curr->next;
		}
}
